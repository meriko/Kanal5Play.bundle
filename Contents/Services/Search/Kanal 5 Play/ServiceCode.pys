from kanal5lib import ShowSeasons as ShowSeasons
from kanal5lib import ProgramShowMenu as ProgramShowMenu
from kanal5lib import CHANNEL_LIST as CHANNEL_LIST

BASE_URL      = 'http://www.kanal%splay.se'

SEARCH_URL     = "http://www.kanal%splay.se/api/publicSearch?query=%s"
VIDEO_PAGE_URL = "http://www.kanal%splay.se/play%s"

FOUND_SHOWS = []
FOUND_EPISODES = []

ART = 'art-default.jpg'

####################################################################################################
def Search(query):

    global FOUND_SHOWS
    global FOUND_EPISODES

    FOUND_SHOWS = []
    FOUND_EPISODES = []

    oc = ObjectContainer(title1='Kanal 5 Play', title2=u'Sök Resultat')

    for channelNo in CHANNEL_LIST:
        oc = decode_results(
                JSON.ObjectFromURL(SEARCH_URL % (channelNo, String.Quote(query))),
                channelNo,
                oc,
                query
                )

    if len(oc) < 1:
        oc.header = unicode("Hittade inga resultat fÃ¶r: '%s'" % query)

    return oc
        

def decode_results(results, channelNo, oc, query):

    global FOUND_SHOWS
    global FOUND_EPISODES

    # SHOWS
    for show in results['programs']:
        title = show['name']
        if len(query) == 1 and query.lower() != title[0].lower():
            # In case query single character - only return shows starting with it
            continue
        if show['premium'] or title in FOUND_SHOWS:
            # Premium or duplicates amongst channels
            continue
        thumb = show['image']
        date = Datetime.ParseDate(show['publishDate']).date()
        url = VIDEO_PAGE_URL % (channelNo, show['link'])
        FOUND_SHOWS.append(title)
        oc.add(TVShowObject(key=Callback(ShowSeasons, title=title, channelNo=channelNo, show_id=show['id'], show_title=title, summary=None,thumb=thumb), title=title, originally_available_at=date, thumb=thumb, rating_key=show['id'], art=R(ART)))

    if len(query) == 1:
        # In case query single character - only return shows starting with it
        oc.objects.sort(key = lambda obj: obj.title)
        return oc

    # EPISODES/CLIPS
    for video in results['videos']:
        if video['programName'] in FOUND_SHOWS or video['premium']:
            # Ignores episodes of an already found show and premium ones
            continue
        title = video['programName'] + " - " + video['name']
        if title in FOUND_EPISODES:
            # Duplicates amongst channels
            continue
        summary = video['description']
        thumb = video['image']
        duration = video['videoLength']
        date = Datetime.ParseDate(video['publishDate']).date()
        url = VIDEO_PAGE_URL % (channelNo, video['link'])

        season = int(video['videoSeason'])
        episode = int(video['videoEpisode'])
        show = video['programName']
        FOUND_EPISODES.append(title)
        oc.add(EpisodeObject(url=url, title=title, summary=summary, show=show, index=episode, season=season, duration=duration, originally_available_at=date, thumb=thumb))
 
    return oc
